variables:
#  GIT_STRATEGY: fetch
    CI_SCRATCH: /home/xl_ci/ci_scratch
    NMSIS_BENCHDIR: $CI_SCRATCH/NMSIS/benchmark_release
    NUCLEI_SDK: git@xl01:software/library/nuclei-sdk.git
    SDK_BRANCH: dev_xlspike
    FIND_IGNORE: "! -wholename \"*build*\""
    CORES: "n205,n307,n307fd,nx600,nx600f,nx600fd"
    SOC: xlspike

before_script:
    - module load nucleisys/riscv-nuclei-elf-gcc
    - module load common
    - if [ -f Work/env.sh ] ; then source Work/env.sh ; fi

stages:
    - prepare
    - build
    - test
    - release

cache:
    key: "$CI_COMMIT_SHA"
    paths:
        - Work

prepare:
    stage: prepare
    retry: 1
    script:
        - mkdir -p Work
        - mkdir -p $NMSIS_BENCHDIR
        - echo "export NMSIS_BENCH_LOGDIR=$NMSIS_BENCHDIR/$(TZ=Asia/Shanghai date +%Y%m%d-%H%M%S)" > Work/env.sh
    tags:
        - software-server

build_library:
    stage: build
    retry: 1
    artifacts:
        name: "nmsis_library-${CI_COMMIT_SHA::8}"
        paths:
            - NMSIS/Library
        expire_in: 2 day
    script:
        - cd NMSIS
        - echo "Generate NMSIS Library for Nuclei RISC-V Processors"
        - make PARELLEL=1 gen
        - echo "Strip debug information in NMSIS Library for Nuclei RISC-V Processors"
        - make strip
    tags:
        - software-server

build_align_library:
    stage: build
    retry: 1
    artifacts:
        name: "nmsis_align_library-${CI_COMMIT_SHA::8}"
        paths:
            - NMSIS/Library
        expire_in: 2 day
    script:
        - cd NMSIS
        - echo "Generate NMSIS Library(Memory access without unalign R/W) for Nuclei RISC-V Processors"
        - make PARELLEL=1 RISCV_ALIGN=ON gen
        - echo "Strip debug information in NMSIS Library for Nuclei RISC-V Processors"
        - make strip
    tags:
        - software-server

test_nn_library:
    stage: test
    artifacts:
        name: "nmsis_nn_test_cycles_log-${CI_COMMIT_SHA::8}"
        paths:
            - NMSIS/Logs
        expire_in: 2 day
    script:
        - git clone -b $SDK_BRANCH $NUCLEI_SDK NMSIS/nuclei_sdk
        - export NUCLEI_SDK_ROOT=$(readlink -f NMSIS/nuclei_sdk)
        - export NUCLEI_SDK_NMSIS=$(readlink -f NMSIS)
        - export NMSIS_LOGS=$NUCLEI_SDK_NMSIS/Logs
        - mkdir $NMSIS_LOGS
        - source NMSIS/env.sh
        - cd NMSIS/NN/NN_Lib_Tests/
        - make gen
        - cd nn_test
        - echo "Benchmark with cycles"
        - export BENCH_UNIT=cycle
        - DSP_ENABLE=OFF nmsis_run_all_apps $CORES . 2>&1 | tee $NMSIS_LOGS/nn_test_dsp_off_cycles.log
        - cat $NMSIS_LOGS/nn_test_dsp_off_cycles.log | grep CSV | tee $NMSIS_LOGS/nn_test_dsp_off_cycles.csv
        - DSP_ENABLE=ON nmsis_run_all_apps $CORES . 2>&1 | tee $NMSIS_LOGS/nn_test_dsp_on_cycles.log
        - cat $NMSIS_LOGS/nn_test_dsp_on_cycles.log | grep CSV | tee $NMSIS_LOGS/nn_test_dsp_on_cycles.csv
        - cd ../../Examples/RISCV/
        - DSP_ENABLE=OFF nmsis_run_all_apps $CORES . 2>&1 | tee $NMSIS_LOGS/nn_examples_dsp_off_cycles.log
        - cat $NMSIS_LOGS/nn_examples_dsp_off_cycles.log | grep CSV | tee $NMSIS_LOGS/nn_examples_dsp_off_cycles.csv
        - DSP_ENABLE=ON nmsis_run_all_apps $CORES . 2>&1 | tee $NMSIS_LOGS/nn_examples_dsp_on_cycles.log
        - cat $NMSIS_LOGS/nn_examples_dsp_on_cycles.log | grep CSV | tee $NMSIS_LOGS/nn_examples_dsp_on_cycles.csv
        - mkdir -p $NMSIS_BENCH_LOGDIR/NMSIS
        - cp $NMSIS_LOGS/*.csv $NMSIS_BENCH_LOGDIR/NMSIS
    tags:
        - software-server
    dependencies:
        - build_library

test_dsp_library:
    stage: test
    artifacts:
      name: "nmsis_dsp_test_cycles_log-${CI_COMMIT_SHA::8}"
      paths:
          - NMSIS/Logs
      expire_in: 2 day
    script:
        - git clone -b $SDK_BRANCH $NUCLEI_SDK NMSIS/nuclei_sdk
        - export NUCLEI_SDK_ROOT=$(readlink -f NMSIS/nuclei_sdk)
        - export NUCLEI_SDK_NMSIS=$(readlink -f NMSIS)
        - export NMSIS_LOGS=$NUCLEI_SDK_NMSIS/Logs
        - mkdir $NMSIS_LOGS
        - source NMSIS/env.sh
        - cd NMSIS/DSP/Examples/RISCV/
        - DSP_ENABLE=OFF nmsis_run_all_apps $CORES . 2>&1 | tee $NMSIS_LOGS/dsp_examples_dsp_off.log
        - DSP_ENABLE=ON nmsis_run_all_apps $CORES . 2>&1 | tee $NMSIS_LOGS/dsp_examples_dsp_on.log
        - cd -
        - cd NMSIS/DSP/Test
        - echo "Benchmark with cycles"
        - export BENCH_UNIT=cycle
        - DSP_ENABLE=OFF nmsis_run_all_apps $CORES . 2>&1 | tee $NMSIS_LOGS/dsp_test_dsp_off_cycles.log
        - cat $NMSIS_LOGS/dsp_test_dsp_off_cycles.log | grep CSV | tee $NMSIS_LOGS/dsp_test_dsp_off_cycles.csv
        - DSP_ENABLE=ON nmsis_run_all_apps $CORES . 2>&1 | tee $NMSIS_LOGS/dsp_test_dsp_on_cycles.log
        - cat $NMSIS_LOGS/dsp_test_dsp_on_cycles.log | grep CSV | tee $NMSIS_LOGS/dsp_test_dsp_on_cycles.csv
        - cd -
        - mkdir -p $NMSIS_BENCH_LOGDIR/NMSIS
        - cp $NMSIS_LOGS/*.csv $NMSIS_BENCH_LOGDIR/NMSIS
    tags:
        - software-server
    dependencies:
        - build_library

deploy_website:
    stage: release
    retry: 1
    only:
        refs:
          - master
        changes:
          - NMSIS/doc/source/**/**/**/*
          - .gitlab-ci.yml
    artifacts:
        name: "nmsis_doc-${CI_COMMIT_SHA::8}"
        paths:
            - NMSIS/doc/build
        expire_in: 2 day
    script:
        - pip3 install --user -r NMSIS/doc/requirements.txt
        - cd NMSIS/doc
        - export PATH=$HOME/.local/bin:$PATH
        - make clean
        - make all
        - make latexpdf
        - make clean_xml
        - cp build/latex/*.pdf build/html/
        - cd ../../
        - ./.ci/ftp_deploy.sh $FTPUSER $FTPPWD $FTPSERVER NMSIS/doc/build/html nmsis
    tags:
        - software-server
